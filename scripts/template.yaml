AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SaaSyBank application.

Parameters:
  TenantId:
    Type: String
    Description: 'Tenant ID'
    Default: 'tenant1'

  ExistingVpcId:
    Type: String
    Description: 'ID of an existing VPC (leave empty to create a new one)'
    Default: ''
  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: 'The CIDR block for the VPC'
  ExistingIgwId:
    Type: String
    Description: 'ID of an existing IGW (leave empty to create a new one)'
    Default: ''

  ExistingElasticacheRedisClusterAddress:
    Type: String
    Description: 'Address of an existing Redis cluster'

  CustomDomainName:
    Description: 'The custom domain name (optional)'
    Type: String
    Default: ''
    AllowedPattern: '^$|(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'
    ConstraintDescription: 'Must be a valid domain name or empty'
  CertificateArn:
    Description: 'Certificate ARN for the custom domain (optional)'
    Type: String
    Default: ''
  ExistingUserPoolId:
    Description: 'ID of an existing Cognito User Pool'
    Type: String
  ExistingCognitoDomain:
    Description: 'Existing Cognito Domain'
    Type: String
  AllowS3PublicAccess:
    Description: 'Allow public access to the S3 bucket'
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'

  LogGroupName:
    Type: String
    Description: 'Log group name for all ECS services'
    Default: '/aws/ecs'

  BankingDatabaseName:
    Type: String
    Default: bankdb
    Description: Name of the banking database name
  BankingServiceName:
    Type: String
    Default: banking-service
    Description: Name of the banking service
  BankingTaskEcrImageUri:
    Type: String
    Description: Name of the banking task image in the ECR repository

  ECSContainerPort:
    Type: Number
    Default: 8080
    Description: Port number the container exposes

  ECSContainerCpu:
    Type: Number
    Default: 256
    Description: CPU units for the container (256 = 0.25 vCPU)
  ECSContainerMemory:
    Type: Number
    Default: 512
    Description: Memory in MB for the container
  ECSDesiredCount:
    Type: Number
    Default: 2
    Description: The number of instantiations of the specified task definition to place and keep running in your service.
  ECSMaxCount:
    Type: Number
    Default: 5
    Description: The maximal number of instantiations of the specified task definition to place and keep running in your service.

  DeployForProduction:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false', '']
    Description: "Set to 'true' to deploy for production."

  AdminUserId:
    Description: 'User id of the admin'
    Type: String
    Default: '53b408f2-d071-70e2-f4da-24618fa52c03' # bettyadm100@gmail.com TODO: Allow to configure from the app

Conditions:
  CreateVpc: !Equals [!Ref ExistingVpcId, ''] # VPC
  CreateIgw: !Equals [!Ref ExistingIgwId, ''] # Internet gateway
  DeployForProductionCondition: !Equals
    - !Ref DeployForProduction
    - 'true'
  HasCustomDomainName: !Not [!Equals [!Ref CustomDomainName, '']]
  HasCertificateArn: !Not [!Equals [!Ref CertificateArn, '']]
  UseCustomDomain: !And
    - !Condition HasCustomDomainName
    - !Condition HasCertificateArn
  AllowS3PublicAccessCondition: !Equals [!Ref AllowS3PublicAccess, 'true']

Resources:
  #==========================================================================================================================================================
  # Networking resources:
  #  - 2 public subnets for an ALB, allowing inbound traffic only on port 80 (initially), from any ip, and outbound traffic only to the ECS' SG.
  #  - 2 private subnets for ECS, allowing inbound traffic only from the ALB's SG, and outbound traffic only to the ECR's and RDS's SGs.
  #  - 2 private subnets for RDS, allowing inbound traffic only from the ECS's SG, and outbound traffic only to the RDS service.
  #==========================================================================================================================================================
  # Traffic Flow Overview
  #   Client to ALB: The client sends a request to the ALB on port 80.
  #   ALB forwards requests to the ECS service's target group on port 80.
  #   Target Group to ECS Container: The target group forwards the request to the ECS container, which listens on a specific port.
  #   ECS service receives traffic on the port specified in ContainerPort (e.g., 8080).
  #   The security group for ECS (MyECSServicesSG) must allow traffic on the port your container is listening to (e.g., 8080).
  #==========================================================================================================================================================

  MyVPC:
    Type: AWS::EC2::VPC
    Condition: CreateVpc
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true # Added to enable DNS support and hostnames in the VPC.
      EnableDnsSupport: true # These settings are crucial for the private DNS feature of VPC endpoints to function properly. They allow your Lambda functions to resolve the AWS service endpoints to private IP addresses within your VPC.
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateIgw
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  AttachMyIGWToMyVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateIgw
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      InternetGatewayId: !Ref MyInternetGateway

  MyPublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-publicRTB1'
    # TODO: pl-66a5400f , pl-6ea54007
  MyPublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-publicRTB2'

  # The route defined with 0.0.0.0/0 allows outbound traffic from resources in the associated subnets to the public internet.
  # Responses to outbound requests are allowed back to those resources, effectively making the interaction appear bidirectional, as long as the security groups (SG) and network ACLs do not block that traffic.
  MyPublicRTB1ToMyIGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !If [CreateIgw, !Ref MyInternetGateway, !Ref ExistingIgwId]
  MyPublicRTB2ToMyIGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !If [CreateIgw, !Ref MyInternetGateway, !Ref ExistingIgwId]

  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet1'
  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet2'

  MyPublicSubnetToMyRTBAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet1
      RouteTableId: !Ref MyPublicRouteTable1
  MyPublicSubnetToMyRTBAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet2
      RouteTableId: !Ref MyPublicRouteTable2

  MyALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP access. TODO: Handle SSL before production!'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ALB-SG'
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 # 443 TODO: Handle SSL before production!
          ToPort: 80 # 443 TODO: Handle SSL before production!
          CidrIp: 0.0.0.0/0

  MyECSServicesSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS service
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: !Ref ECSContainerPort # Port your container listens on, e.g., 8080
          ToPort: !Ref ECSContainerPort # Port your container listens on, e.g., 8080
          SourceSecurityGroupId: !Ref MyALBSG
      SecurityGroupEgress:
        - IpProtocol: tcp # to redis
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp' # to ECR
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ECS-SG'

  MyALBEgressRule:
    Type: AWS::EC2::SecurityGroupEgress # MyALBSG to MyECSServicesSG.
    Properties:
      GroupId: !Ref MyALBSG
      IpProtocol: tcp
      FromPort: !Ref ECSContainerPort
      ToPort: !Ref ECSContainerPort
      DestinationSecurityGroupId: !Ref MyECSServicesSG

  MyRDSBasedFunctionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS Based Function
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-RDSBasedFunction-SG'

  MyRDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-RDS-SG'
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref MyECSServicesSG
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref MyRDSBasedFunctionSG
        # - IpProtocol: tcp # TODO: Bastion host
        #   FromPort: 5432
        #   ToPort: 5432
        #   CidrIp: 149.106.249.221/32

  MyECSServicesEgressRule:
    Type: AWS::EC2::SecurityGroupEgress # MyECSServicesSG to MyRDSSG
    Properties:
      GroupId: !Ref MyECSServicesSG
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref MyRDSSG

  MyRDSBasedFunctionEgressRule:
    Type: AWS::EC2::SecurityGroupEgress # MyRDSBasedFunctionSG to MyRDSSG.
    Properties:
      GroupId: !Ref MyRDSBasedFunctionSG
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref MyRDSSG

  # ------------------------------------------------------------------------------
  # Lambda layers.
  # ------------------------------------------------------------------------------
  pgLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../backend/layers/pg-layer.zip
      CompatibleRuntimes:
        - nodejs20.x

  #==========================================================================================================================================================
  # Application Load Balancer (ALB)
  #==========================================================================================================================================================
  BankingALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-BankingTG'
      Port: 80 # hardcoded - the Target group forwards to ECS on port 80
      Protocol: HTTP
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /api/banking/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  MyTimeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-TimeLambda'
      Handler: index.handler
      Role: !GetAtt MyTimeLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              return {
                  statusCode: 200,
                  statusDescription: "200 OK",
                  isBase64Encoded: false,
                  headers: {
                      "Content-Type": "text/plain"
                  },
                  body: new Date().toISOString()
              };
          };
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 10

  MyTimeLambdaALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 4
      Actions:
        # - Type: authenticate-cognito
        #   Order: 1
        #   AuthenticateCognitoConfig:
        #     UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExistingUserPoolId}
        #     UserPoolClientId: !Ref ALBCognitoUserPoolClient
        #     UserPoolDomain: !Ref ExistingCognitoDomain
        #     OnUnauthenticatedRequest: authenticate
        #     Scope: openid
        #     SessionCookieName: AWSELBAuthSessionCookie
        #     SessionTimeout: 3600
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref MyTimeLambdaTG
      Conditions:
        - Field: path-pattern
          Values:
            - /api/time
      ListenerArn: !Ref MyALBListener

  MyTimeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  MyTimeLambdaTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-TimeLambdaTG'
      TargetType: lambda
      Targets:
        - Id: !GetAtt MyTimeLambda.Arn
      HealthCheckEnabled: false

  MyTimeLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyTimeLambda.Arn
      Principal: 'elasticloadbalancing.amazonaws.com'
      SourceArn: !Sub
        - 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${TargetGroupName}/*'
        - TargetGroupName: !Sub '${AWS::StackName}-TimeLambdaTG'

  MyTablesLambdaALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 3
      Actions:
        # - Type: authenticate-cognito
        #   Order: 1
        #   AuthenticateCognitoConfig:
        #     UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExistingUserPoolId}
        #     UserPoolClientId: !Ref ALBCognitoUserPoolClient
        #     UserPoolDomain: !Ref ExistingCognitoDomain
        #     OnUnauthenticatedRequest: authenticate
        #     Scope: openid
        #     SessionCookieName: AWSELBAuthSessionCookie
        #     SessionTimeout: 3600
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref MyTablesLambdaTG
      Conditions:
        - Field: path-pattern
          Values:
            - /api/tables
      ListenerArn: !Ref MyALBListener

  MyTablesLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyCreateTablesFunction.Arn
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Sub
        - arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${TargetGroupName}/*
        - TargetGroupName: !Sub '${AWS::StackName}-TablesLambdaTG'

  MyTablesLambdaTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-TablesLambdaTG'
      TargetType: lambda
      Targets:
        - Id: !GetAtt MyCreateTablesFunction.Arn

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-ALB'
      Subnets:
        - !Ref MyPublicSubnet1
        - !Ref MyPublicSubnet2
      SecurityGroups:
        - !Ref MyALBSG
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '600' # seconds

  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Port: 80 # hardcoded
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '404'
            MessageBody: 'Not Found'
            ContentType: text/plain

  # MyALBCertificate: # TODO: Handle SSL before production!
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: '!GetAtt MyALB.DNSName'
  #     ValidationMethod: DNS
  #     DomainValidationOptions:
  #       - DomainName: !GetAtt MyALB.DNSName
  #         ValidationDomain: !GetAtt MyALB.DNSName

  #==========================================================================================================================================================
  # Cognito
  #==========================================================================================================================================================

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref ExistingUserPoolId
      ClientName: !Sub '${AWS::StackName}-UserPoolClient'
      GenerateSecret: false
      AllowedOAuthFlows: ['code']
      AllowedOAuthScopes: ['phone', 'email', 'openid', 'profile']
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !If
          - UseCustomDomain
          - !Sub 'https://${CustomDomainName}'
          - !Sub 'https://${FrontendDistribution.DomainName}'
        - 'http://localhost:3000'
      LogoutURLs:
        - !If
          - UseCustomDomain
          - !Sub 'https://${CustomDomainName}'
          - !Sub 'https://${FrontendDistribution.DomainName}'
        - 'http://localhost:3000'
      SupportedIdentityProviders: ['Google']

  # ALBCognitoUserPoolClient: # TODO: Handle after MyALBCertificate (Internal error reported from downstream service during operation 'Actions of type 'authenticate-cognito' are supported only on HTTPS listeners).
  #   Type: AWS::Cognito::UserPoolClient
  #   Properties:
  #     UserPoolId: !Ref ExistingUserPoolId
  #     ClientName: !Sub ${AWS::StackName}-alb-client
  #     GenerateSecret: true
  #     AllowedOAuthFlowsUserPoolClient: true
  #     AllowedOAuthFlows:
  #       - code
  #     AllowedOAuthScopes:
  #       - openid
  #       - email
  #       - profile
  #     CallbackURLs:
  #       - !Sub https://${MyALB.DNSName}/oauth2/idpresponse
  #     SupportedIdentityProviders:
  #       - Google
  #     PreventUserExistenceErrors: ENABLED

  # MyALBAuthenticator:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     ListenerArn: !Ref MyALBListener
  #     Priority: 1
  #     Conditions:
  #       - Field: path-pattern
  #         Values:
  #           - /oauth2/*
  #     Actions:
  #       - Type: authenticate-cognito
  #         Order: 1
  #         AuthenticateCognitoConfig:
  #           UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExistingUserPoolId}
  #           UserPoolClientId: !Ref ALBCognitoUserPoolClient
  #           UserPoolDomain: !Ref ExistingCognitoDomain
  #           OnUnauthenticatedRequest: authenticate
  #           Scope: openid
  #           SessionCookieName: AWSELBAuthSessionCookie
  #           SessionTimeout: 3600
  #       - Type: fixed-response
  #         Order: 2
  #         FixedResponseConfig:
  #           StatusCode: '200'
  #           ContentType: text/plain
  #           MessageBody: 'Authenticated'

  #==========================================================================================================================================================
  # ECS Fargate: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html
  #==========================================================================================================================================================
  MyECSPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ECSPrivateSubnet1'
  MyECSPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ECSPrivateSubnet2'

  MyPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateRTB1'
  MyPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateRTB2'

  MyECSPrivateSubnetToMyPrivateRTBAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyECSPrivateSubnet1
      RouteTableId: !Ref MyPrivateRouteTable1
  MyECSPrivateSubnetToMyPrivateRTBAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyECSPrivateSubnet2
      RouteTableId: !Ref MyPrivateRouteTable2

  MyNATGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  MyNATGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  MyNATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyNATGatewayEIP1.AllocationId
      SubnetId: !Ref MyPublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGateway1'
  MyNATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyNATGatewayEIP2.AllocationId
      SubnetId: !Ref MyPublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGateway2'

  MyPrivateSubnet1Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref MyNATGateway1
  MyPrivateSubnet2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref MyNATGateway2

  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-Cluster'

  MyECSTaskExecutionRole: # This role is assumed by the ECS task to pull images from Amazon ECR and to send logs to Amazon CloudWatch.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  MyECSTaskRole: # This role is assumed by the containers in the ECS task to interact with AWS services.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
      Policies:
        - PolicyName: SQSExecutedTransactionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt BankingExecutedTransactionsQueue.Arn

  # Banking service
  #----------------
  BankingECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${LogGroupName}/${AWS::StackName}'
      RetentionInDays: 1

  BankingALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref MyALBListener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /api/banking/*
      Actions:
        # - Type: authenticate-cognito
        #   Order: 1
        #   AuthenticateCognitoConfig:
        #     UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExistingUserPoolId}
        #     UserPoolClientId: !Ref ALBCognitoUserPoolClient
        #     UserPoolDomain: !Ref ExistingCognitoDomain
        #     OnUnauthenticatedRequest: authenticate
        #     Scope: openid
        #     SessionCookieName: AWSELBAuthSessionCookie
        #     SessionTimeout: 3600
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref BankingALBTG

  BankingECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-banking-task'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ECSContainerCpu
      Memory: !Ref ECSContainerMemory
      ExecutionRoleArn: !GetAtt MyECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt MyECSTaskRole.Arn
      ContainerDefinitions:
        - Name: 'banking-task'
          Image: !Ref BankingTaskEcrImageUri
          PortMappings:
            - ContainerPort: !Ref ECSContainerPort # The port the app listens on
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '${LogGroupName}/${AWS::StackName}'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName
          Environment:
            - Name: SERVER_PORT
              Value: !Ref ECSContainerPort
            - Name: RDS_ENDPOINT
              Value: !GetAtt MyRDSDBInstance.Endpoint.Address
            - Name: DB_NAME
              Value: !Ref BankingDatabaseName
            - Name: DB_USERNAME
              Value: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:username}}'
            - Name: DB_PASSWORD
              Value: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:password}}'
            - Name: APP_AWS_REGION
              Value: !Ref AWS::Region
            - Name: EXECUTED_TRANSACTIONS_QUEUE_URL
              Value: !Ref BankingExecutedTransactionsQueue
            - Name: ELASTICACHE_REDIS_ADDRESS
              Value: !Ref ExistingElasticacheRedisClusterAddress
            - Name: TENANT_ID
              Value: !Ref TenantId
            - Name: STACK_NAME
              Value: !Ref AWS::StackName
            - Name: ADMIN_USER_ID
              Value: !Ref AdminUserId
            - Name: ENABLE_ENHANCED_LOGGING
              Value: false

  BankingECSService:
    Type: AWS::ECS::Service
    DependsOn: BankingALBListenerRule
    Properties:
      ServiceName: !Sub '${AWS::StackName}-${BankingServiceName}'
      Cluster: !Ref MyECSCluster
      TaskDefinition: !Ref BankingECSTaskDefinition
      DesiredCount: !Ref ECSDesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref MyECSServicesSG
          Subnets:
            - !Ref MyECSPrivateSubnet1
            - !Ref MyECSPrivateSubnet2
          AssignPublicIp: DISABLED
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      EnableExecuteCommand: true
      LoadBalancers:
        - ContainerName: 'banking-task'
          ContainerPort: !Ref ECSContainerPort
          TargetGroupArn: !Ref BankingALBTG

  #==========================================================================================================================================================
  # TODO: Alternate EKS (Kubernetes) with Fargate deployment: https://docs.aws.amazon.com/eks/latest/userguide/fargate.html.
  #==========================================================================================================================================================

  #==========================================================================================================================================================
  # RDS
  #==========================================================================================================================================================
  MyRDSPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      CidrBlock: 10.0.7.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-RDSPrivateSubnet1'
  MyRDSPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      CidrBlock: 10.0.8.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-RDSPrivateSubnet2'

  MyRDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-RDS'
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '16.4'
      MasterUsername: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:username}}'
      MasterUserPassword: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:password}}'
      DBSubnetGroupName: !Ref MyRDSSubnetGroup
      VPCSecurityGroups:
        - !Ref MyRDSSG
      DBName: !Ref BankingDatabaseName
      BackupRetentionPeriod: 0 # Set to 0 to disable automated backups retention
      PubliclyAccessible: !If [DeployForProductionCondition, false, true]
      MultiAZ: !If [DeployForProductionCondition, true, false] # Enable Multi-AZ for high availability
    DeletionPolicy: Delete # This applies when the stack is deleted; ensure no final snapshot is created.

  MyRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub '${AWS::StackName}-RDSSubnetGroup'
      SubnetIds:
        - !Ref MyRDSPrivateSubnet1
        - !Ref MyRDSPrivateSubnet2
      DBSubnetGroupName: !Sub '${AWS::StackName}-RDSSubnetGroup'

  MyCreateTablesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: LambdaRDSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:Connect
                Resource: '*'

  MyCreateTablesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/sql-tables/
      Handler: tablesCreation.handler
      Runtime: nodejs20.x
      Layers:
        - !Ref pgLayer
      Timeout: 300
      Environment:
        Variables:
          RDS_ENDPOINT: !GetAtt MyRDSDBInstance.Endpoint.Address
          DB_NAME: !Ref BankingDatabaseName
          DB_USERNAME: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:username}}'
          DB_PASSWORD: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:password}}'
      VpcConfig:
        SubnetIds:
          - !Ref MyRDSPrivateSubnet1
          - !Ref MyRDSPrivateSubnet2
        SecurityGroupIds:
          - !Ref MyRDSBasedFunctionSG
      Role: !GetAtt MyCreateTablesLambdaExecutionRole.Arn

  BankingExecutedTransactionsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-executedTransactionsQueue.fifo'
      FifoQueue: true
      ContentBasedDeduplication: true

  TransactionsEncryptorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/transactions-encryptor
      Handler: transactionsEncryptor.handler
      Runtime: nodejs20.x
      Layers:
        - !Ref pgLayer
      Environment:
        Variables:
          RDS_ENDPOINT: !GetAtt MyRDSDBInstance.Endpoint.Address
          DB_NAME: !Ref BankingDatabaseName
          DB_USERNAME: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:username}}'
          DB_PASSWORD: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:password}}'
      Role: !GetAtt TransactionsEncryptorFunctionExecutionRole.Arn
      Events: # event source mapping
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt BankingExecutedTransactionsQueue.Arn
            BatchSize: 10
            Enabled: true
      VpcConfig:
        SubnetIds:
          - !Ref MyRDSPrivateSubnet1
          - !Ref MyRDSPrivateSubnet2
        SecurityGroupIds:
          - !Ref MyRDSBasedFunctionSG

  TransactionsEncryptorFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SQSReceiveMessagePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt BankingExecutedTransactionsQueue.Arn
        - PolicyName: RDSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:Connect
                Resource: '*'

  # ------------------------------------------------------------------------------
  # S3 web site and cloudfront
  # ------------------------------------------------------------------------------

  # S3 Bucket for frontend hosting
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-frontend-static
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['GET']
            AllowedOrigins: ['*']
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: !If [AllowS3PublicAccessCondition, false, true]
        BlockPublicPolicy: !If [AllowS3PublicAccessCondition, false, true]
        IgnorePublicAcls: !If [AllowS3PublicAccessCondition, false, true]
        RestrictPublicBuckets: !If [AllowS3PublicAccessCondition, false, true]
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  # Bucket Policy to allow public read access
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${FrontendBucket.Arn}/*'

  #  CloudFront Distribution
  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !Select [1, !Split ['//', !GetAtt FrontendBucket.WebsiteURL]]
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: allow-all # TODO: redirect-to-https Handle SSL before production!
          AllowedMethods: ['GET', 'HEAD', 'OPTIONS']
          CachedMethods: ['GET', 'HEAD']
          ForwardedValues:
            QueryString: false
            Headers: ['Origin']
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        ViewerCertificate: !If
          - UseCustomDomain
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
          - CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100
        Enabled: true
        Aliases: !If
          - UseCustomDomain
          - [!Ref CustomDomainName]
          - !Ref AWS::NoValue

Outputs:
  MyVPCId:
    Description: 'The ID of the VPC'
    Value: !Ref MyVPC
    Condition: CreateVpc
  MyIgwId:
    Description: 'The ID of the Internet Gateway'
    Value: !Ref MyInternetGateway
    Condition: CreateIgw

  LoadBalancerURL:
    Description: 'LoadBalancer URL'
    Value: !Sub 'http://${MyALB.DNSName}'

  MyECSServicesSG:
    Description: 'ECS Service security group'
    Value: !Ref MyECSServicesSG

  RDSInstanceEndpoint:
    Description: 'RDS Instance Endpoint'
    Value: !GetAtt MyRDSDBInstance.Endpoint.Address

  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref ExistingUserPoolId
  UserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !Ref UserPoolClient
  CognitoDomain:
    Description: 'Cognito User Pool Domain'
    Value: !Ref ExistingCognitoDomain

  S3BucketName:
    Description: 'Name of the S3 bucket hosting the frontend'
    Value: !Ref FrontendBucket
  CloudFrontUrl:
    Description: 'CloudFront distribution URL'
    Value: !Sub 'https://${FrontendDistribution.DomainName}'
  CloudFrontDistributionId:
    Description: 'CloudFront distribution ID'
    Value: !Ref FrontendDistribution
