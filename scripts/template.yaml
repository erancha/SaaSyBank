AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SaaSyBank application.

Parameters:
  ExistingVpcId:
    Type: String
    Description: 'ID of an existing VPC (leave empty to create a new one)'
    Default: ''
  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: 'The CIDR block for the VPC'
  ExistingIgwId:
    Type: String
    Description: 'ID of an existing IGW (leave empty to create a new one)'
    Default: ''
  ExistingRtbId:
    Type: String
    Description: 'ID of the existing RTB (leave empty to create new RTB and subnets)'
    Default: ''
  ExistingMyPublicSubnet1:
    Type: String
    Description: 'ID of the existing PublicSubnet1'
    Default: ''
  ExistingMyPublicSubnet2:
    Type: String
    Description: 'ID of the existing PublicSubnet2'
    Default: ''

  # ExistingUserPoolId:
  #   Type: String
  #   Description: Existing Cognito User Pool ID.
  # ExistingIdentityPoolId:
  #   Type: String
  #   Description: Existing Cognito Identity Pool ID.
  # ExistingCognitoDomain:
  #   Description: 'Existing Cognito Domain.'
  #   Type: String
  #   Default: ''

  LogGroupName:
    Type: String
    Description: 'Log group name for all ECS services'
    Default: '/aws/ecs/'
  LogGroupArn:
    Type: String
    Description: 'Log group ARN for all ECS services (leave empty to create a new one)'
    Default: ''

  BankingDatabaseName:
    Type: String
    Default: bankdb
    Description: Name of the banking database name
  BankingServiceName:
    Type: String
    Default: banking-service
    Description: Name of the banking service
  BankingTaskEcrImageUri:
    Type: String
    Description: Name of the banking task image in the ECR repository

  ECSContainerPort:
    Type: Number
    Default: 8080
    Description: Port number the container exposes

  ECSContainerCpu:
    Type: Number
    Default: 256
    Description: CPU units for the container (256 = 0.25 vCPU)
  ECSContainerMemory:
    Type: Number
    Default: 512
    Description: Memory in MB for the container
  ECSDesiredCount:
    Type: Number
    Default: 1
    Description: The number of instantiations of the specified task definition to place and keep running in your service.
  ECSMaxCount:
    Type: Number
    Default: 5
    Description: The maximal number of instantiations of the specified task definition to place and keep running in your service.

  AllowRDSPublicAccess:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false', '']
    Description: "Set to 'true' to allow public access to the RDS instance (recommended only for development)."

Conditions:
  CreateVpc: !Equals [!Ref ExistingVpcId, ''] # VPC
  CreateIgw: !Equals [!Ref ExistingIgwId, ''] # Internet gateway
  CreateRtbAndSubnets: !Equals [!Ref ExistingRtbId, ''] # Create RTB and subnets
  AllowRDSPublicAccessCondition: !Equals
    - !Ref AllowRDSPublicAccess
    - 'true'
  CreateLogGroup: !Equals [!Ref LogGroupArn, '']

Resources:
  #==========================================================================================================================================================
  # Networking resources:
  #  - 2 public subnets for an ALB, allowing inbound traffic only on port 80 (initially), from any ip, and outbound traffic only to the ECS' SG.
  #  - (WIP) 2 private subnets for ECS, allowing inbound traffic only from the ALB's SG, and outbound traffic only to the ECR's and RDS's SGs.
  #  - (WIP) 2 private subnets for RDS, allowing inbound traffic only from the ECS's SG, and outbound traffic only to the RDS service.
  #  - (WIP) ECS' tasks require private access to retrieve images from ECR thru three vpc endpoints: two to ECR (interface) and one to S3 (gateway).
  #==========================================================================================================================================================
  # Traffic Flow Overview
  #   Client to ALB: The client sends a request to the ALB on port 80.
  #   ALB forwards requests to the ECS service's target group on port 80.
  #   Target Group to ECS Container: The target group forwards the request to the ECS container, which listens on a specific port.
  #   ECS service receives traffic on the port specified in ContainerPort (e.g., 8080).
  #   The security group for ECS (MyECSServicesSG) must allow traffic on the port your container is listening to (e.g., 8080).
  #==========================================================================================================================================================

  MyVPC:
    Type: AWS::EC2::VPC
    Condition: CreateVpc
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true # Added to enable DNS support and hostnames in the VPC.
      EnableDnsSupport: true # These settings are crucial for the private DNS feature of VPC endpoints to function properly. They allow your Lambda functions to resolve the AWS service endpoints to private IP addresses within your VPC.
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateIgw
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  AttachMyIGWToMyVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateIgw
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateRtbAndSubnets
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-RTB'
    # TODO: pl-66a5400f , pl-6ea54007

  MyRTBToMyIGWRoute:
    # The route defined with 0.0.0.0/0 allows outbound traffic from resources in the associated subnets to the public internet.
    # Responses to outbound requests are allowed back to those resources, effectively making the interaction appear bidirectional, as long as the security groups (SG) and network ACLs do not block that traffic.
    Type: AWS::EC2::Route
    Condition: CreateRtbAndSubnets
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !If [CreateIgw, !Ref MyInternetGateway, !Ref ExistingIgwId]

  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateRtbAndSubnets
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet1'
  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateRtbAndSubnets
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet2'

  AssociateMyPublicSubnet1ToMyRTB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateRtbAndSubnets
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      SubnetId: !Ref MyPublicSubnet1
      RouteTableId: !Ref MyRouteTable
  AssociateMyPublicSubnet2ToMyRTB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateRtbAndSubnets
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      SubnetId: !Ref MyPublicSubnet2
      RouteTableId: !Ref MyRouteTable

  MyALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP access. TODO: Handle SSL before production!'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-MyALBSG'
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 # 443 TODO: Handle SSL before production!
          ToPort: 80 # 443 TODO: Handle SSL before production!
          CidrIp: 0.0.0.0/0

  # ECS, ECR - private subnets
  #---------------------------
  # MyECSPrivateSubnet1:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
  #     CidrBlock: 10.0.5.0/24
  #     AvailabilityZone: !Select [0, !GetAZs '']
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${AWS::StackName}-MyECSPrivateSubnet1'
  # MyECSPrivateSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
  #     CidrBlock: 10.0.6.0/24
  #     AvailabilityZone: !Select [1, !GetAZs '']
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${AWS::StackName}-MyECSPrivateSubnet2'

  # AssociateMyECSPrivateSubnet1ToMyRTB: # to access the vpc endpoints above (maybe only the S3 gateway endpoint?)
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref MyECSPrivateSubnet1
  #     RouteTableId: !Ref MyRouteTable
  # AssociateMyECSPrivateSubnet2ToMyRTB: # to access the vpc endpoints above (maybe only the S3 gateway endpoint?)
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref MyECSPrivateSubnet2
  #     RouteTableId: !Ref MyRouteTable

  MyECSServicesSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS service
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: !Ref ECSContainerPort # Port your container listens on, e.g., 8080
          ToPort: !Ref ECSContainerPort # Port your container listens on, e.g., 8080
          SourceSecurityGroupId: !Ref MyALBSG
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ECS-SG'
  MyECSServicesEgressRule:
    Type: AWS::EC2::SecurityGroupEgress # Egress Rule for ECS to Allow Traffic to ECR
    Properties:
      GroupId: !Ref MyECSServicesSG
      IpProtocol: 'tcp'
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  MyALBEgressRule:
    Type: AWS::EC2::SecurityGroupEgress # Egress Rule for ALB to Allow Traffic to ECS Services.
    Properties:
      GroupId: !Ref MyALBSG
      IpProtocol: tcp
      FromPort: !Ref ECSContainerPort
      ToPort: !Ref ECSContainerPort
      DestinationSecurityGroupId: !Ref MyECSServicesSG

  # RDS
  #-------------
  # MyRDSPrivateSubnet1:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
  #     CidrBlock: 10.0.7.0/24
  #     AvailabilityZone: !Select [0, !GetAZs '']
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${AWS::StackName}-MyRDSPrivateSubnet1'
  # MyRDSPrivateSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
  #     CidrBlock: 10.0.8.0/24
  #     AvailabilityZone: !Select [1, !GetAZs '']
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${AWS::StackName}-MyRDSPrivateSubnet2'

  MyRDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-MyRDSSG'
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref MyECSServicesSG
        # - IpProtocol: tcp
        #   FromPort: 5432
        #   ToPort: 5432
        #   CidrIp: 149.106.249.221/32

  MyECSEgressRule:
    Type: AWS::EC2::SecurityGroupEgress # Egress Rule for ECS to Allow Traffic to RDS
    Properties:
      GroupId: !Ref MyECSServicesSG
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref MyRDSSG

  # ------------------------------------------------------------------------------
  # Lambda layers.
  # ------------------------------------------------------------------------------
  pgLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../backend/layers/pg-layer.zip
      CompatibleRuntimes:
        - nodejs20.x

  #==========================================================================================================================================================
  # Application Load Balancer (ALB)
  #==========================================================================================================================================================
  BankingALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-BankingTG'
      Port: 80 # hardcoded - the Target group forwards to ECS on port 80
      Protocol: HTTP
      VpcId: !If [CreateVpc, !Ref MyVPC, !Ref ExistingVpcId]
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /api/banking/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  MyTimeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-TimeLambda'
      Handler: index.handler
      Role: !GetAtt MyTimeLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              return {
                  statusCode: 200,
                  statusDescription: "200 OK",
                  isBase64Encoded: false,
                  headers: {
                      "Content-Type": "text/plain"
                  },
                  body: new Date().toISOString()
              };
          };
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 10

  MyTimeLambdaALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 4
      Actions:
        # - Type: authenticate-cognito
        #   Order: 1
        #   AuthenticateCognitoConfig:
        #     UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExistingUserPoolId}
        #     UserPoolClientId: !Ref ALBCognitoUserPoolClient
        #     UserPoolDomain: !Ref ExistingCognitoDomain
        #     OnUnauthenticatedRequest: authenticate
        #     Scope: openid
        #     SessionCookieName: AWSELBAuthSessionCookie
        #     SessionTimeout: 3600
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref MyTimeLambdaTG
      Conditions:
        - Field: path-pattern
          Values:
            - /api/time
      ListenerArn: !Ref MyALBListener

  MyTimeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  MyTimeLambdaTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-TimeLambdaTG'
      TargetType: lambda
      Targets:
        - Id: !GetAtt MyTimeLambda.Arn
      HealthCheckEnabled: false

  MyTimeLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyTimeLambda.Arn
      Principal: 'elasticloadbalancing.amazonaws.com'
      SourceArn: !Sub
        - 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${TargetGroupName}/*'
        - TargetGroupName: !Sub '${AWS::StackName}-TimeLambdaTG'

  MyTablesLambdaALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 3
      Actions:
        # - Type: authenticate-cognito
        #   Order: 1
        #   AuthenticateCognitoConfig:
        #     UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExistingUserPoolId}
        #     UserPoolClientId: !Ref ALBCognitoUserPoolClient
        #     UserPoolDomain: !Ref ExistingCognitoDomain
        #     OnUnauthenticatedRequest: authenticate
        #     Scope: openid
        #     SessionCookieName: AWSELBAuthSessionCookie
        #     SessionTimeout: 3600
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref MyTablesLambdaTG
      Conditions:
        - Field: path-pattern
          Values:
            - /api/tables
      ListenerArn: !Ref MyALBListener

  MyTablesLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyCreateTablesFunction.Arn
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Sub
        - arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${TargetGroupName}/*
        - TargetGroupName: !Sub '${AWS::StackName}-TablesLambdaTG'

  MyTablesLambdaTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-TablesLambdaTG'
      TargetType: lambda
      Targets:
        - Id: !GetAtt MyCreateTablesFunction.Arn

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-ALB'
      Subnets:
        - !If [CreateRtbAndSubnets, !Ref MyPublicSubnet1, !Ref ExistingMyPublicSubnet1]
        - !If [CreateRtbAndSubnets, !Ref MyPublicSubnet2, !Ref ExistingMyPublicSubnet2]
      SecurityGroups:
        - !Ref MyALBSG
      Scheme: internet-facing

  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Port: 80 # hardcoded
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '404'
            MessageBody: 'Not Found'
            ContentType: text/plain

  # MyALBCertificate: # TODO: Handle SSL before production!
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: '!GetAtt MyALB.DNSName'
  #     ValidationMethod: DNS
  #     DomainValidationOptions:
  #       - DomainName: !GetAtt MyALB.DNSName
  #         ValidationDomain: !GetAtt MyALB.DNSName

  #==========================================================================================================================================================
  # Cognito
  #==========================================================================================================================================================
  # ALBCognitoUserPoolClient: # TODO: Handle after MyALBCertificate (Internal error reported from downstream service during operation 'Actions of type 'authenticate-cognito' are supported only on HTTPS listeners).
  #   Type: AWS::Cognito::UserPoolClient
  #   Properties:
  #     UserPoolId: !Ref ExistingUserPoolId
  #     ClientName: !Sub ${AWS::StackName}-alb-client
  #     GenerateSecret: true
  #     AllowedOAuthFlowsUserPoolClient: true
  #     AllowedOAuthFlows:
  #       - code
  #     AllowedOAuthScopes:
  #       - openid
  #       - email
  #       - profile
  #     CallbackURLs:
  #       - !Sub https://${MyALB.DNSName}/oauth2/idpresponse
  #     SupportedIdentityProviders:
  #       - Google
  #     PreventUserExistenceErrors: ENABLED

  # MyALBAuthenticator:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     ListenerArn: !Ref MyALBListener
  #     Priority: 1
  #     Conditions:
  #       - Field: path-pattern
  #         Values:
  #           - /oauth2/*
  #     Actions:
  #       - Type: authenticate-cognito
  #         Order: 1
  #         AuthenticateCognitoConfig:
  #           UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExistingUserPoolId}
  #           UserPoolClientId: !Ref ALBCognitoUserPoolClient
  #           UserPoolDomain: !Ref ExistingCognitoDomain
  #           OnUnauthenticatedRequest: authenticate
  #           Scope: openid
  #           SessionCookieName: AWSELBAuthSessionCookie
  #           SessionTimeout: 3600
  #       - Type: fixed-response
  #         Order: 2
  #         FixedResponseConfig:
  #           StatusCode: '200'
  #           ContentType: text/plain
  #           MessageBody: 'Authenticated'

  #==========================================================================================================================================================
  # Fargate for ECS: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html
  #==========================================================================================================================================================
  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-Cluster'

  MyECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      # Policies:
      #   - PolicyName: AllowCreateLogGroup # TODO: Currently the deployment manually creates the log group: LogGroupName
      #     PolicyDocument:
      #       Version: '2012-10-17'
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - logs:CreateLogGroup
      #           Resource: '*'

  MyECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
      Policies:
        - PolicyName: SQSSendMessagePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt BankingExecutedTransactionsQueue.Arn

  # Banking service
  #----------------
  BankingECSLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateLogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: 1

  BankingALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref MyALBListener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /api/banking/*
      Actions:
        # - Type: authenticate-cognito
        #   Order: 1
        #   AuthenticateCognitoConfig:
        #     UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExistingUserPoolId}
        #     UserPoolClientId: !Ref ALBCognitoUserPoolClient
        #     UserPoolDomain: !Ref ExistingCognitoDomain
        #     OnUnauthenticatedRequest: authenticate
        #     Scope: openid
        #     SessionCookieName: AWSELBAuthSessionCookie
        #     SessionTimeout: 3600
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref BankingALBTG

  BankingECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-banking-task'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ECSContainerCpu
      Memory: !Ref ECSContainerMemory
      ExecutionRoleArn: !GetAtt MyECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt MyECSTaskRole.Arn
      ContainerDefinitions:
        - Name: 'banking-task'
          Image: !Ref BankingTaskEcrImageUri
          PortMappings:
            - ContainerPort: !Ref ECSContainerPort # The port the app listens on
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName
          Environment:
            - Name: SERVER_PORT
              Value: !Ref ECSContainerPort
            - Name: RDS_ENDPOINT
              Value: !GetAtt MyRDSDBInstance.Endpoint.Address
            - Name: DB_NAME
              Value: !Ref BankingDatabaseName
            - Name: DB_USERNAME
              Value: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:username}}'
            - Name: DB_PASSWORD
              Value: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:password}}'
            - Name: APP_AWS_REGION
              Value: !Ref AWS::Region
            - Name: SQS_QUEUE_URL
              Value: !Ref BankingExecutedTransactionsQueue

  BankingECSService:
    Type: AWS::ECS::Service
    DependsOn: BankingALBListenerRule
    Properties:
      ServiceName: !Sub '${AWS::StackName}-${BankingServiceName}'
      Cluster: !Ref MyECSCluster
      TaskDefinition: !Ref BankingECSTaskDefinition
      DesiredCount: !Ref ECSDesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref MyECSServicesSG
          Subnets:
            # - !Ref MyECSPrivateSubnet1 # TODO
            # - !Ref MyECSPrivateSubnet2 # TODO
            - !If [CreateRtbAndSubnets, !Ref MyPublicSubnet1, !Ref ExistingMyPublicSubnet1]
            - !If [CreateRtbAndSubnets, !Ref MyPublicSubnet2, !Ref ExistingMyPublicSubnet2]
          AssignPublicIp: ENABLED
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      EnableExecuteCommand: true
      LoadBalancers:
        - ContainerName: 'banking-task'
          ContainerPort: !Ref ECSContainerPort
          TargetGroupArn: !Ref BankingALBTG

  BankingExecutedTransactionsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-executedTransactionsQueue.fifo'
      FifoQueue: true
      ContentBasedDeduplication: true

  TransactionsLoggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: transactionsLogger.handler
      Runtime: nodejs20.x
      CodeUri: ../backend/transactions-logger/
      Layers:
        - !Ref pgLayer
        # - 'arn:aws:lambda:eu-central-1:575491442067:layer:NotesEncryptionLayer:240' # TODO: Adjust the security group
        # - 'arn:aws:lambda:eu-central-1:575491442067:layer:IoredisLayer:37' # TODO: Adjust the security group
      Environment:
        Variables:
          RDS_ENDPOINT: !GetAtt MyRDSDBInstance.Endpoint.Address
          DB_NAME: !Ref BankingDatabaseName
          DB_USERNAME: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:username}}'
          DB_PASSWORD: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:password}}'
      Role: !GetAtt TransactionsLoggerFunctionExecutionRole.Arn
      Events: # event source mapping
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt BankingExecutedTransactionsQueue.Arn
            BatchSize: 10
            Enabled: true
      VpcConfig:
        SubnetIds:
          - !If [CreateRtbAndSubnets, !Ref MyPublicSubnet1, !Ref ExistingMyPublicSubnet1]
          - !If [CreateRtbAndSubnets, !Ref MyPublicSubnet2, !Ref ExistingMyPublicSubnet2]
        SecurityGroupIds:
          - !Ref MyECSServicesSG

  TransactionsLoggerFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SQSReceiveMessagePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt BankingExecutedTransactionsQueue.Arn
        - PolicyName: RDSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:Connect
                Resource: '*'
        # - PolicyName: DynamoReadOnlyDBAccess
        #   PolicyDocument:
        #     Version: '2012-10-17'
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - dynamodb:Query
        #           - dynamodb:Scan
        #           - dynamodb:GetItem
        #         Resource:
        #           - 'arn:aws:dynamodb:eu-central-1:575491442067:table/ena-users'
        #           - 'arn:aws:dynamodb:eu-central-1:575491442067:table/ena-users/index/UserIdIndex'
        # - PolicyName: KMSAccess
        #   PolicyDocument:
        #     Version: '2012-10-17'
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - kms:Encrypt
        #           - kms:Decrypt
        #           - kms:GenerateDataKey
        #         Resource: 'arn:aws:kms:eu-central-1:575491442067:key/d0efc261-b71d-4f5c-9686-9876cc664243'
        # - PolicyName: ElastiCacheAccess
        #   PolicyDocument:
        #     Version: '2012-10-17'
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - 'elasticache:DescribeCacheClusters'
        #           - 'elasticache:DescribeReplicationGroups'
        #         Resource: '*'

  #==========================================================================================================================================================
  # TODO: Alternate EKS (Kubernetes) with Fargate deployment: https://docs.aws.amazon.com/eks/latest/userguide/fargate.html.
  #==========================================================================================================================================================

  #==========================================================================================================================================================
  # RDS
  #==========================================================================================================================================================
  MyRDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-RDS'
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '16.4'
      MasterUsername: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:username}}'
      MasterUserPassword: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:password}}'
      DBSubnetGroupName: !Ref MyRDSSubnetGroup
      VPCSecurityGroups:
        - !Ref MyRDSSG
      DBName: !Ref BankingDatabaseName
      BackupRetentionPeriod: 0 # Set to 0 to disable automated backups retention
      PubliclyAccessible: !If [AllowRDSPublicAccessCondition, true, false]
    DeletionPolicy: Delete # This applies when the stack is deleted; ensure no final snapshot is created.

  MyRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub '${AWS::StackName}-RDSSubnetGroup'
      SubnetIds:
        # - !Ref MyRDSPrivateSubnet1 # TODO
        # - !Ref MyRDSPrivateSubnet2 # TODO
        - !If [CreateRtbAndSubnets, !Ref MyPublicSubnet1, !Ref ExistingMyPublicSubnet1]
        - !If [CreateRtbAndSubnets, !Ref MyPublicSubnet2, !Ref ExistingMyPublicSubnet2]
      DBSubnetGroupName: !Sub '${AWS::StackName}-RDSSubnetGroup'

  MyCreateTablesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: LambdaRDSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:Connect
                Resource: '*'

  MyCreateTablesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../backend/sql-tables/
      Handler: tablesCreation.handler
      Runtime: nodejs20.x
      Layers:
        - !Ref pgLayer
      Timeout: 300
      Environment:
        Variables:
          RDS_ENDPOINT: !GetAtt MyRDSDBInstance.Endpoint.Address
          DB_NAME: !Ref BankingDatabaseName
          DB_USERNAME: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:username}}'
          DB_PASSWORD: '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-central-1:575491442067:secret:/sb/rdscredentials-T3ztmQ:SecretString:password}}'
      VpcConfig:
        SubnetIds:
          - !If [CreateRtbAndSubnets, !Ref MyPublicSubnet1, !Ref ExistingMyPublicSubnet1]
          - !If [CreateRtbAndSubnets, !Ref MyPublicSubnet2, !Ref ExistingMyPublicSubnet2]
        SecurityGroupIds:
          - !Ref MyECSServicesSG
      Role: !GetAtt MyCreateTablesLambdaExecutionRole.Arn

  #==========================================================================================================================================================
  # Cloudwatch dashboard
  #==========================================================================================================================================================
  # MyDashboard:
  #   Type: AWS::CloudWatch::Dashboard
  #   Properties:
  #     DashboardName: !Sub '${AWS::StackName}-Dashboard'
  #     DashboardBody:
  #       Fn::Sub: |
  #         {
  #             "widgets": [
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 12,
  #                     "x": 18,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 300,
  #                         "metrics": [
  #                             [ "AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${MyRDSDBInstance}", { "label": "${MyRDSDBInstance}" } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Average",
  #                         "title": "CPUUtilization",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 6,
  #                     "x": 18,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 300,
  #                         "metrics": [
  #                             [ "AWS/RDS", "DatabaseConnections", "DBInstanceIdentifier", "${MyRDSDBInstance}", { "label": "${MyRDSDBInstance}" } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Average",
  #                         "title": "DatabaseConnections",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 18,
  #                     "x": 18,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 300,
  #                         "metrics": [
  #                             [ "AWS/RDS", "FreeableMemory", "DBInstanceIdentifier", "${MyRDSDBInstance}", { "label": "${MyRDSDBInstance}" } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Average",
  #                         "title": "FreeableMemory",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 0,
  #                     "x": 0,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Average",
  #                         "title": "Target Response Time",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 0,
  #                     "x": 6,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "Requests",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 42,
  #                     "x": 6,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "HTTPCode_Target_5XX_Count", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "Target 5XXs",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 36,
  #                     "x": 6,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "HTTPCode_Target_4XX_Count", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "Target 4XXs",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 6,
  #                     "x": 0,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "HTTPCode_ELB_5XX_Count", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "ELB 5XXs",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 12,
  #                     "x": 12,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "HTTPCode_ELB_4XX_Count", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "ELB 4XXs",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 12,
  #                     "x": 0,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "HTTPCode_ELB_500_Count", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "ELB 500s",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 18,
  #                     "x": 0,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "HTTPCode_ELB_502_Count", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "ELB 502s",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 24,
  #                     "x": 0,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "HTTPCode_ELB_503_Count", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "ELB 503s",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 30,
  #                     "x": 0,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "HTTPCode_ELB_504_Count", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "ELB 504s",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 24,
  #                     "x": 18,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "TargetConnectionErrorCount", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "Target connection errors",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 12,
  #                     "x": 6,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "RejectedConnectionCount", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "Sum rejected connections",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 30,
  #                     "x": 6,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "HTTPCode_Target_3XX_Count", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "Target 3XXs",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 24,
  #                     "x": 6,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "HTTPCode_Target_2XX_Count", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "Target 2XXs",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 6,
  #                     "x": 6,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "ActiveConnectionCount", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "Active Connection Count",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 18,
  #                     "x": 12,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "NewConnectionCount", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "New Connection Count",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 6,
  #                     "x": 12,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "ProcessedBytes", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "Processed Bytes",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 0,
  #                     "x": 12,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "ConsumedLCUs", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "Consumed Load Balancer Capacity Units",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 24,
  #                     "x": 12,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "HTTP_Fixed_Response_Count", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "HTTP fixed response count",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 18,
  #                     "x": 6,
  #                     "type": "metric",
  #                     "properties": {
  #                         "period": 60,
  #                         "metrics": [
  #                             [ "AWS/ApplicationELB", "LambdaTargetProcessedBytes", "LoadBalancer", "${MyALB.LoadBalancerFullName}", { "label": "${MyALB.Name}", "visible": true } ]
  #                         ],
  #                         "region": "eu-central-1",
  #                         "stat": "Sum",
  #                         "title": "Lambda Target Processed Bytes",
  #                         "yAxis": {
  #                             "left": {
  #                                 "min": 0
  #                             }
  #                         }
  #                     }
  #                 },
  #                 {
  #                     "height": 6,
  #                     "width": 6,
  #                     "y": 0,
  #                     "x": 18,
  #                     "type": "metric",
  #                     "properties": {
  #                         "metrics": [
  #                             [ "AWS/ECS", "CPUUtilization", "ServiceName", "${BankingECSService.Name}", "ClusterName", "${MyECSCluster}", { "stat": "Minimum" } ],
  #                             [ "...", { "stat": "Maximum" } ],
  #                             [ "...", { "stat": "Average" } ]
  #                         ],
  #                         "period": 300,
  #                         "region": "eu-central-1",
  #                         "stacked": false,
  #                         "title": "ECS CPU utilization",
  #                         "view": "timeSeries"
  #                     }
  #                 }
  #             ]
  #         }

Outputs:
  MyVPCId:
    Description: 'The ID of the VPC'
    Value: !Ref MyVPC
    Condition: CreateVpc

  MyIgwId:
    Description: 'The ID of the Internet Gateway'
    Value: !Ref MyInternetGateway
    Condition: CreateIgw

  MyRtbId:
    Description: 'The ID of the Route Table'
    Value: !Ref MyRouteTable
    Condition: CreateRtbAndSubnets

  PublicSubnet1Id:
    Description: 'ID of the first public subnet'
    Value: !Ref MyPublicSubnet1
    Condition: CreateRtbAndSubnets

  PublicSubnet2Id:
    Description: 'ID of the second public subnet'
    Value: !Ref MyPublicSubnet2
    Condition: CreateRtbAndSubnets

  # ALBSecurityGroupId:
  #   Description: 'ID of the ALB Security Group'
  #   Value: !Ref MyALBSG

  LoadBalancerURL:
    Description: 'LoadBalancer URL'
    Value: !Sub 'http://${MyALB.DNSName}'

  # ECSSecurityGroupId:
  #   Description: 'ID of the ECS Security Group'
  #   Value: !Ref MyECSServicesSG

  # ECSExecutionRoleArn:
  #   Description: 'ARN of the ECS Execution Role'
  #   Value: !GetAtt MyECSTaskExecutionRole.Arn

  # ECSTaskRoleArn:
  #   Description: 'ARN of the ECS Task Role'
  #   Value: !GetAtt MyECSTaskRole.Arn

  # ECSServiceName:
  #   Description: 'Name of the ECS service'
  #   Value: !Ref BankingECSService

  RDSInstanceEndpoint:
    Description: 'RDS Instance Endpoint'
    Value: !GetAtt MyRDSDBInstance.Endpoint.Address
