AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to set up ECS Fargate in a private subnet, accessing ECR thru VPC endpoints.

Parameters:
  EcrImageUri:
    Type: String
    Description: Name of the banking task image in the ECR repository
  LogGroupName:
    Type: String
    Description: 'Log group name for all ECS services'
    Default: '/aws/ecs/'

Resources:
  # =============================
  # Network
  # =============================
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  MyPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet'

  MyPrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateRTB'

  MyPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet
      RouteTableId: !Ref MyPrivateSubnetRouteTable

  # VPC Endpoint for ECR API
  MyVPCEndpointECR:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true

  # VPC Endpoint for ECR Docker Registry
  MyVPCEndpointECRD:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true

  # VPC Endpoint for S3
  MyVPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway

  # =============================
  # ECS
  # =============================
  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyECSCluster

  MyECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: MyTaskDefinition
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt MyECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt MyECSTaskRole.Arn
      ContainerDefinitions:
        - Name: MyContainer
          Image: !Ref EcrImageUri
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName

  MyECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MyECSCluster
      TaskDefinition: !Ref MyECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref MyPrivateSubnet
          SecurityGroups:
            - !Ref MyECSServicesSG
          AssignPublicIp: DISABLED

  MyECSServicesSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security Group of the ECS service'
      VpcId: !Ref MyVPC
      SecurityGroupIngress: [] # In this test the ecs tasks are not accessed (e.g. by an ALB).
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0

  # Primarily responsible for allowing the ECS task to pull Docker images from Amazon ECR (Elastic Container Registry) and to send logs to Amazon CloudWatch Logs:
  MyECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Assigned to the ECS task itself and is used to grant it access to other AWS services that it needs to interact with while it is running:
  MyECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MyECSAppPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:Connect # Note: This action is implied by VPC settings.
                Resource: '*'

Outputs:
  VPCId:
    Description: 'VPC ID'
    Value: !Ref MyVPC
  PublicSubnetId:
    Description: 'Private Subnet ID'
    Value: !Ref MyPrivateSubnet
  ECSClusterName:
    Description: 'ECS Cluster Name'
    Value: !Ref MyECSCluster
  ECSServiceName:
    Description: 'ECS Service Name'
    Value: !Ref MyECSService
